一、感受部分
spl语句要用；结尾
mysql -u root -p                                              进入数据库输入密码
show databases;                                               里边四个库information_schema mysql performance_schema不可以动 
use sys;                                                      使用sys库
show tables:                                                  显示表   或者  show tables from 库名
select database();                                            显示当前所在的库
create  database 库名
create table 表名（变量）
desc 表名       查看表      create table stuinfo(
                           -> id int,                         id是字段 int是类型  用，隔开
                           -> name varchar(20));

insert into stuinfo (id,name) values(2,'rose');               插入数据
select * from stuinfo;                                        显示数据
delete from stuinfo where id=1;                               删除数据
select version();                                             查看版本

二、语法规范
1.不区分大小写，但是建议关键字大写
2.每条命令用分号结尾
3.每条命令根据需要可以进行缩进或者换行
4.注释         单行注释用#开头

F9执行     F12格式化

##DQL语言的学习
###进阶1：基础查询
	语法：
	建议先进入要用的库        use sys
	SELECT 要查询的东西      select 查询列表 from 表名； 比如 查询单个SELECT last_name FROM employees;
                                                           查询多个SELECT last_name,salary,email FROM employees;
                                                           查询全部 SELECT+双击表名 from employees  
                                                                    或者 SELECT * FROM employees
	【FROM 表名】;

	特点：
	①通过select查询完的结果 ，是一个虚拟的表格，不是真实存在
	② 要查询的东西 可以是常量值、可以是表达式、可以是字段、可以是函数
	select 100;  select 'john'; SELECT 100*98;
	取别名：SELECT last_name AS 姓,first_name AS 名 FROM employees;
	       SELECT last_name 姓,first_name 名 FROM employees;
	       SELECT salary AS 'out put' FROM employees       #out put 含有关键词 要加引号
	去重    SELECT DISTINCT department_id FROM employees;    #字段前加DISTINCT
	+ 只是运算符    select '123'+90;结果是213 会把字符型转换成数值型 
	               select 'aaa'+90;结果是90  aaa无法转换 就变成0 
	               select null+10 结果是null
	concat函数  select concat(last_name,first_name) as 姓名 from employees;
	ifnull函数  SELECT IFNULL(commission_pct,0) AS 奖金率,commission_pct FROM employees;   #commission_pct是可能有null的字段
	ej:SELECT CONCAT(`first_name`,',',`last_name`,',',IFNULL(commission_pct,0)) AS out_put FROM `employees`;
       select last_name,department_id,salary*12*(1+IFNULL(commission_pct,0)) from employees;
###进阶2：条件查询
	条件查询：根据条件过滤原始表的数据，查询到想要的数据
	语法：
	select 
		要查询的字段|表达式|常量值|函数                    
	from 
		表
	where 
		筛选条件 ;        执行顺序是先表再筛选最后select

	分类：
	一、条件表达式
		示例：salary>10000
		条件运算符：
		> < >= <= = != <>
		SELECT * FROM employees WHERE salary>12000;
        SELECT last_name,department_id FROM employees WHERE department_id!=90;
	
	二、逻辑表达式
	示例：salary>10000 && salary<20000
	
	逻辑运算符：          连接条件表达式

		and（&&）:两个条件如果同时成立，结果为true，否则为false
		or(||)：两个条件只要有一个成立，结果为true，否则为false
		not(!)：如果条件成立，则not后为false，否则为true
	SELECT `last_name`,`salary`,`commission_pct` FROM `employees` WHERE salary>=10000 AND `salary`<=20000;
    SELECT * FROM employees WHERE department_id<90 OR department_id>110 OR salary>15000;

	三、模糊查询
	示例：last_name like 'a%'
	like 
	between and  (包含临界值)	
	in                  判断某字段的值是否属于in列表中某一项
	is null
	SELECT * FROM employees WHERE last_name LIKE '%a%';           #查询包含a的  用Like
	SELECT last_name,salary FROM employees WHERE last_name LIKE '__e_a%';   _表示位置
	select last_name from employees where last_name like '_\_%';         #第二个字符是_所以用转意符\
	SELECT * FROM employees WHERE employee_id BETWEEN 100 AND 120;
	select last_name,job_id from employees where job_id IN('IT_PROT','AD_VP','AD_PRES');    类型兼容
	select last_name,commission_pct from employees where commission_pct IS NULL
	select last_name,commission_pct from employees where commission_pct IS NOT NULL

	SELECT salary,last_name FROM employees WHERE commission_pct IS NULL AND salary<18000;
	SELECT * FROM employees WHERE job_id !='IT' OR salary=12000;
	select distinct location_id from departments;
	安全等于 判普通的数值、也可以判断是否NULL
		select last_name,commission_pct from employees where commission_pct <=> NULL;
        SELECT * FROM employees WHERE salary<=>12000;
 	select * from emp where ename like upper('%%')
	--相当于
	select * from emp where ename is not null

###进阶3：排序查询	
	
	语法：
	select
		要查询的东西
	from
		表
	where 
		条件
	
	order by 排序的字段|表达式|函数|别名 【asc|desc】  对应升序和降序

	SELECT * FROM employees WHERE department_id>=90 ORDER BY hiredate ASC;
	SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪 FROM employees ORDER BY salary*(1+IFNULL(commission_pct,0)) DESC;
	支持别名排序
	SELECT *,salary*12*(1+IFNULL(commission_pct,0)) AS 年薪 FROM employees ORDER BY 年薪 DESC;
	SELECT LENGTH(last_name) AS 字节长度,last_name,salary FROM employees ORDER BY LENGTH(last_name) DESC;

	按照多个字段排序
	select * from employees order by salary ASC,employee_id DESC;
	SELECT last_name,salary FROM employees WHERE salary NOT BETWEEN 8000 AND 17000 ORDER BY salart DESC;

	SELECT * FROM employees WHERE email LIKE '%e%' ORDER BY LENGTH(email) DESC,department_id ASC;

	
	###进阶4：常见函数
	一、单行函数
	1、字符函数
		concat拼接   select concat(last_name,first_name) as 姓名 from employees;
		substr截取子串    select substr('李莫愁爱生了陆展元'，7) as out_put; 截取字符 select substr('李莫愁爱生了陆展元',1,3) as out_put;
		upper转换成大写   select upper('john'); SELECT CONCAT(UPPER(last_name),LOWER(first_name)) AS 姓名 FROM employees;
		lower转换成小写   select lower('joHn');
		select concat(upper(substr(last_name,1,1)),' ',lower(substr(last_name,2))) as output;
		trim去前后指定的空格和字符  select trim('  张翠山  ')； SELECT TRIM('a' FROM 'aaaaaaaaa张aaaaaaaaa翠山aaaa') AS out_put;
		ltrim去左边空格    select trim('  张翠山  ')
		rtrim去右边空格     select trim('  张翠山  ')
		replace替换       SELECT REPLACE('张无忌爱上了周芷若','周芷若','张敏') AS out_put; 
		lpad左填充        select lpad('殷素素',10,'*') as out_put
		rpad右填充
		instr返回子串第一次出现的索引     select instr('杨不悔爱上了殷六侠','殷六侠') as out_put;    找不到返回0
		length 获取字节个数  SELECT LENGTH('张三丰hahaha'); 一个汉字3个字符
		
	2、数学函数
		round 四舍五入  select round(1.65);  SELECT ROUND(1.6578,2);  参数2表示小数点后保留的位数
		rand 随机数       
		floor向下取整     select floor(-1.02);
		ceil向上取整啊    select ceil(-1.02);
		mod取余           select MOD(10,-3);
		truncate截断      select truncate(1.69999,3)； 从小数点后三位截断
	3、日期函数
		now当前系统日期+时间   select now();
		curdate当前系统日期    SELECT CURDATE();
		curtime当前系统时间     SELECT CURTIME(); 
		year                   select year();      select year(hiredate) as 年 from employees;
        month                  select month(); 
                               select monthname(now());  返回月的英文名字
		str_to_date 将字符转换成日期    SELECT STR_TO_DATE('1998-3-2','%Y-%c-%d') AS out_put;
		                              SELECT * FROM employees WHERE hiredate=STR_TO_DATE('4-3 1992','%c-%d %Y');
		date_format将日期转换成字符     
	4、流程控制函数    if 和 case 前有逗号
		if 处理双分支         
		SELECT last_name,commission_pct,IF(commission_pct IS NULL,'没奖金','有奖金') AS 备注 FROM employees;
		
		case语句 处理多分支
			情况1：处理等值判断
			情况2：处理条件判断   多重if
		ej: select salary as 原始工资,department_id,
		    case department_id
		    when 30 then salary*1.1
		    when 40 then salary*1.2
		    when 50 then salary*1.3
		    else salary
		    end as 新工资
		    from employees;

		    SELECT salary,
			CASE
			WHEN salary>20000 THEN 'A'
			WHEN salary>15000 THEN 'B'
			WHEN salary>10000 THEN 'C'
			ELSE 'D'
			END AS 工资级别
			FROM employees;

			SELECT job_id AS job,
			CASE job_id
			WHEN 'AD_PRES' THEN 'A'
			WHEN 'ST_MAN' THEN 'B'
			WHEN 'IT_PROG' THEN 'C'
			WHEN 'SA_PRE' THEN 'D'
			WHEN 'ST_CLERK' THEN 'E'
			END AS Grade
			FROM employees
			WHERE job_id='AD_PRES';
		
	5、其他函数
		version版本
		database当前库
		user当前连接用户


二、分组函数       用作统计使用，又称为聚合函数或统计函数或组函数

		sum 求和   
		max 最大值
		min 最小值
		avg 平均值
		count 计数
	    
	    SELECT SUM(salary),AVG(salary),MIN(salary),MAX(salary),COUNT(salary) FROM employees;


		特点：
		1、以上五个分组函数都忽略null值，除了count(*)
		2、sum和avg一般用于处理数值型
			max、min、count可以处理任何数据类型
	    3、都可以搭配distinct使用，用于统计去重后的结果
	    SELECT SUM(DISTINCT salary),SUM(salary) FROM employees;
		4、count的参数可以支持：
			字段、*、常量值，一般放1
	
		   建议使用 count(*)


##进阶5：分组查询
	语法：
	select 查询的字段，分组函数
	from 表
	group by 分组的字段

	SELECT MAX(salary),job_id FROM employees GROUP BY job_id;
	SELECT COUNT(*),location_id FROM departments GROUP BY location_id;
	SELECT AVG(salary),department_id FROM employees WHERE email LIKE '%a%' GROUP BY department_id ORDER BY AVG(salary);
	SELECT MAX(salary),manager_id FROM employees WHERE commission_pct IS NOT NULL GROUP BY manager_id;
	SELECT COUNT(*),LENGTH(last_name) AS len_name FROM employees GROUP BY LENGTH(last_name) HAVING COUNT(*)>5;
	SELECT MAX(salary),job_id FROM employees WHERE commission_pct IS NOT NULL GROUP BY job_id HAVING MAX(salary)>12000;
	SELECT MIN(salary),manager_id FROM employees WHERE manager_id>102 GROUP BY manager_id HAVING MIN(salary)>5000;
    
	特点：
	1、可以按单个字段分组
	2、和分组函数一同查询的字段最好是分组后的字段
	3、分组筛选
			针对的表	位置			关键字
	分组前筛选：	原始表		group by的前面		where
	分组后筛选：	分组后的结果集	group by的后面		having
	
	4、可以按多个字段分组，字段之间用逗号隔开
	select acg(salary),department_id,job_id from employees group by department_id,job_id;
	5、可以支持排序
	select avg(salary),department_id,job_id from employees group by department_id,job_id order by avg(salary) desc;
	6、having后可以支持别名

##进阶6：多表连接查询

	笛卡尔乘积：如果连接条件省略或无效则会出现
	解决办法：添加上连接条件
	
	SELECT `name`,boyName FROM boys,beauty WHERE beauty.boyfriend_id=boys.id;

一、传统模式下的连接 ：等值连接——非等值连接


	1.等值连接的结果 = 多个表的交集
	2.n表连接，至少需要n-1个连接条件
	3.多个表不分主次，没有顺序要求
	4.一般为表起别名，提高阅读性和性能  如果为表起了别名，则查询的字段就不能使用原来的表明去限定
	SELECT last_name,j.job_id,job_title 
	FROM employees AS e,jobs AS j 
	WHERE e.`job_id`=j.`job_id`;

	SELECT city,department_name 
	FROM locations AS l,departments AS d 
	WHERE l.`location_id`=d.`location_id` AND city LIKE '_o%';
	
	SELECT department_name,d.manager_id,MIN(salary) 
	FROM departments AS d,employees AS e 
	WHERE d.`department_id`=e.`department_id` 
	AND commission_pct IS NOT NULL 
	GROUP BY d.`department_id`;

	SELECT job_title,COUNT(*) AS num
	FROM  jobs AS j,employees AS e
	WHERE j.`job_id`=e.`job_id`
	GROUP BY e.`job_id`
	ORDER BY num;

	SELECT salary,grade_level
	FROM employees e,job_grades g
	WHERE salary BETWEEN g.`lowest_sal` AND g.`highest_sal`;

二、sql99语法：通过join关键字实现连接

	含义：1999年推出的sql语法
	支持：
	内连接            交集
		等值连接              inner    

		非等值连接
		SELECT salary,grade_level
		FROM `employees` AS e
		INNER JOIN `job_grades` g
		ON e.`salary` BETWEEN g.`lowest_sal` AND g.`highest_sal`;
		自连接 
	外连接（左外和右外）   用于查询一个表有一个表没有的     相当于内连接+主表和从表没有的结果显示NULL
	        左外后是从表   右外后边是主表
	SELECT b.`name`,boys.*
	FROM beauty b
	LEFT OUTER JOIN boys
	ON b.`boyfriend_id`=boys.`id`;


	SELECT b.`name`,boys.*
	FROM boys
	RIGHT OUTER JOIN beauty b
	ON b.`boyfriend_id`=boys.`id`;
	交叉连接  笛卡尔乘积
	SELECT b.*,bo.*
	FROM beauty b
	CROSS JOIN boys bo;


	
	语法：
	
	select 字段，...
	from 表1
	【inner|left outer|right outer|cross】join 表2 on  连接条件
	【inner|left outer|right outer|cross】join 表3 on  连接条件
	【where 筛选条件】
	【group by 分组字段】
	【having 分组后的筛选条件】
	【order by 排序的字段或表达式】
	
	好处：语句上，连接条件和筛选条件实现了分离，简洁明了！
	SELECT last_name,department_name
	FROM `employees` AS e
	INNER JOIN `departments` AS d
	ON e.`department_id`=d.`department_id`;

	SELECT last_name,department_name,job_title
	FROM employees AS e
	INNER JOIN departments AS d ON e.`department_id`=d.`department_id`
	INNER JOIN jobs j ON e.`job_id`=j.`job_id`
	ORDER BY department_name DESC;








	
三、自连接


SELECT e.employee_id,e.last_name,d.last_name,d.employee_id
FROM employees AS e,employees AS d
WHERE e.manager_id=d.`employee_id`;

SELECT e.employee_id,e.last_name,d.last_name,d.employee_id
inner FROM employees AS e,employees AS d
on e.manager_id=d.`employee_id`;




##进阶7：子查询

含义：

	一条查询语句中又嵌套了另一条完整的select语句，其中被嵌套的select语句，称为子查询或内查询
	在外面的查询语句，称为主查询或外查询

特点：

	1、子查询都放在小括号内
	2、子查询可以放在from后面：
							  表子查询
	               select后面：                            将子查询结果充当新表实现内连接等操作
                              仅仅支持标量子查询
	               where后面：                              用的多
	                           标量子查询
	                           列子查询
	                           行子查询
	               having后面：                             用的多
                               标量子查询
	                           列子查询
	                           行子查询

	               exists后边：
	               		       表子查询
	               *但一般放在条件的右侧
	3、子查询优先于主查询执行，主查询使用了子查询的执行结果
	4、子查询根据查询结果的行数不同分为以下两类：
	标量子查询（一行一列）
	列子查询（一列多行）
	行子查询（一行多列）
	表子查询（多行多列）

	① 单行子查询
		结果集只有一行
		一般搭配单行操作符使用：> < = <> >= <= 
		非法使用子查询的情况：
		a、子查询的结果为一组值
		b、子查询的结果为空
		
                    SELECT last_name 
					FROM employees 
					WHERE salary > (
					  SELECT salary 
					  FROM employees 
					  WHERE last_name = 'Abel'
					) ;

					SELECT last_name,job_id,salary 
					FROM employees
					WHERE job_id=(
						SELECT job_id
						FROM employees
						WHERE employee_id=141
					) AND salary>(
						SELECT salary
						FROM employees
						WHERE employee_id=143
					);

					SELECT MIN(salary),department_id
					FROM employees
					GROUP BY department_id
					HAVING MIN(salary)>(
						SELECT MIN(salary)
						FROM employees
						WHERE department_id=50
					);

	② 多行子查询
		结果集有多行
		一般搭配多行操作符使用：any、all、in、not in
		in： 属于子查询结果中的任意一个就行
		any和all往往可以用其他查询代替
					SELECT last_name
					FROM employees
					WHERE department_id IN (
						SELECT department_id
						FROM departments
						WHERE location_id IN(1400,1700)
					);

					SELECT last_name,employee_id,job_id,salary
					FROM employees
					WHERE salary<ANY(
						SELECT DISTINCT salary
						FROM employees
						WHERE job_id='IT_PROG'
					) and job_id!='IT_PROG';

					SELECT *
					FROM employees
					WHERE employee_id=(
						SELECT MIN(employee_id)
						FROM employees
					) AND salary=(
						SELECT MAX(salary)
						FROM employees
					); 

					SELECT *
					FROM employees
					WHERE (employee_id,salary)=(
						SELECT MIN(employee_id),MAX(salary)
						FROM employees
					);

					SELECT d.*,(
						SELECT COUNT(*)
						FROM employees AS e
						WHERE e.department_id=d.department_id
					) AS 个数
					FROM departments AS d;

					SELECT ag_dep.*,g.grade_level
					FROM(
						SELECT AVG(salary) AS ag,department_id
						FROM employees
						GROUP BY department_id
					) ag_dep
					INNER JOIN job_grades g
					ON ag_dep.ag BETWEEN lowest_sal AND highest_sal;

##进阶8：分页查询

应用场景：

	实际的web项目中需要根据用户的需求提交对应的分页查询的sql语句

语法：

	select 字段|表达式,...
	from 表
	【where 条件】
	【group by 分组字段】
	【having 条件】
	【order by 排序的字段】
	limit 【起始的条目索引，】条目数;

特点：

	1.起始条目索引从0开始
	
	2.limit子句放在查询语句的最后
	
	3.公式：select * from  表 limit （page-1）*sizePerPage,sizePerPage
	假如:
	每页显示条目数sizePerPage
	要显示的页数 page

	select * from employees limit 0,5;
	select * from employees limit 12,15;   第一条到第25条
	select * from employees where commission_pct is not null 
	order by salary desc
	limit 10

##进阶9：联合查询
当查询的表来自不同表，且字段不同一

引入：
	union 联合、合并

语法：

	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union 【all】
	select 字段|常量|表达式|函数 【from 表】 【where 条件】 union  【all】
	.....
	select 字段|常量|表达式|函数 【from 表】 【where 条件】

特点：

	1、多条查询语句的查询的列数必须是一致的
	2、多条查询语句的查询的列的类型几乎相同
	3、union代表去重，union all代表不去重

	select * from employees where email like '%a%'
	union
	select * from employees where department_id>90;

##DML语言

###插入

语法：
	insert into 表名(字段名，...)      支持插入多行
	values(值1，...);

	insert into 表名               不支持插入多行       不支持和查询搭配
	set 列名=字段值
特点：

	1、字段类型和值类型一致或兼容，而且一一对应    顺序可以换
	2、可以为空的字段，可以不用插入值，或用null填充   要么列名和值都省略 要么有列名，值用null填充
	3、不可以为空的字段，必须插入值
	4、字段个数和值的个数必须一致
	5、字段可以省略，但默认所有字段，并且顺序和表中的存储顺序一致
    INSERT INTO beauty(`id`,`name`,`sex`,`borndate`,`phone`,`photo`,`boyfriend_id`)
	VALUES(13,'刘六六','女','1990-4-23','18888888',NULL,2);
	方式一插入多行：
	INSERT INTO beauty(`id`,`name`,`sex`,`borndate`,`phone`,`photo`,`boyfriend_id`)
	VALUES(13,'刘六六','女','1990-4-23','18888888',NULL,2),(15,'刘六的撒','女','1988-4-23','1999888888',NULL,3)

	INSERT INTO beauty
	SET id=19,NAME='刘欣然',phone='999'

	和查询搭配：
	insert into beauty(id,name,phone)
	select 26,'宋茜'，‘11809866’
###修改

修改单表语法：

	update 表名 set 字段=新值,字段=新值
	【where 条件】
修改多表语法：
	sql92语法
	update 表1 别名1,表2 别名2
	set 字段=新值，字段=新值
	where 连接条件
	and 筛选条件

	update 表1 别名
	inner|left|right join 表2 别名
	on 连接条件
	set 列=值。。。。。
	where 筛选条件；

	update beauty set phone='13899888899'
	where name like '唐%'；
	update boys set boyname='张飞'，usercp=10
	where id=2;

	UPDATE boys AS bo
	INNER JOIN beauty AS b 
	ON bo.id=b.boyfriend_id
	SET b.phone='114'
	WHERE bo.boyName='张无忌';



###删除

方式1：delete语句 

单表的删除： ★
	delete from 表名 【where 筛选条件】  删整行

	delete from beauty where phone like '%9';


多表的删除：
	delete 别名1，别名2
	from 表1 别名1，表2 别名2
	where 连接条件
	and 筛选条件;

	delete 表1的别名
	from 表 别名
	inner|left|right join 表2 别名
	on 连接条件
	where 筛选条件；

	delete b from beauty b
	inner join boys bo on b.boyfriend_id=bo.id
	where bo.boyName='张无忌'


方式2：truncate语句        不能加where 只能删库

	truncate table 表名


两种方式的区别【面试题】
	
	#1.truncate不能加where条件，而delete可以加where条件
	
	#2.truncate的效率高一丢丢
	
	#3.truncate 删除带自增长的列的表后，如果再插入数据，数据从1开始
	#delete 删除带自增长列的表后，如果再插入数据，数据从上一次的断点处开始
	
	#4.truncate删除不能回滚，delete删除可以回滚


##DDL语句
###库和表的管理
库的管理：

	一、创建库
	create database 【if not exists】库名
	CREATE DATABASE IF NOT EXISTS books;
	二、删除库
	drop database 库名
表的管理：
	#1.创建表

	create table 表名（
		列名 列的类型【（长度）约束】
		列名 列的类型【（长度）约束】
		列名 列的类型【（长度）约束】
		。。。。。
		列名 列的类型【（长度）约束】
	）；
	


	CREATE TABLE IF NOT EXISTS stuinfo(
		stuId INT,
		stuName VARCHAR(20),
		gender CHAR,
		bornDate DATETIME
	);

	DESC studentinfo;
	#2.修改表 alter
	语法：ALTER TABLE 表名 ADD|MODIFY|DROP|CHANGE COLUMN 字段名 【字段类型】;
	
	#①修改字段名
	ALTER TABLE studentinfo CHANGE  COLUMN sex gender CHAR;
	
	#②修改表名
	ALTER TABLE stuinfo RENAME [TO]  studentinfo;
	#③修改字段类型和列级约束
	ALTER TABLE studentinfo MODIFY COLUMN borndate DATE ;
	
	#④添加字段
	
	ALTER TABLE studentinfo ADD COLUMN email VARCHAR(20) first;
	#⑤删除字段
	ALTER TABLE studentinfo DROP COLUMN email;

    修改列名    change
	ALTER TABLE book CHANGE COLUMN publishDate pubDate DATETIME;
	修改类型或者约束     modify
	ALTER TABLE book modify COLUMN publishDate pubDate timestamp;
	增加新列ADD
	alter table author add column annual double;
	删除列  drop
	ALTER TABLE author drop COLUMN annual DOUBLE;
	修改表名 rename 
	alter table author rename to book_author;


	
	
	#3.删除表
	
	DROP TABLE [IF EXISTS] studentinfo;

	4。复制表
	只复制表的结构
	CREATE TABLE copy LIKE author;
	复制表的结构和数据
	CREATE TABLE copy 
	SELECT * FROM book_author;
	复制部分
	create table copy2
	select id ,au_name
	from author
	where nation='中国'；
	


###常见类型
	数值型：
		整型：
			creat table tab_int(
				t1 int, zerofill (不支持负号，出现负数自动变零)
				t2 int unsigned       (无符号)
			)
			
		小数：
			浮点型                  M:是数字的长度        D:小数点后保留的位数
									超出范围插入临界值
				float(M,D) 
				double(M,D)
			定点型
				DEC(M,D)
				decimal(M,D)                M默认是10   D默认为0

	字符型：
			较短的文本                 M是最大字符数
				char（M）              固定长度字符
				varchar（M）				可变长度字符
			较长的     
				text 
				blob（较大的二进制）如图片
	日期型：

	date        只保存日期
	datetime          日期加时间
	year              只保存年
	time             只保存时间
	timestamp      		日期加时间



	Blob类型：

	Enum类型      枚举       就是某个字段可以插入的东西
						ej  create table tab_char(
							c1 enum('a','b','c')
						)



###常见约束     一种限制，保证表中数据的一致性
	在创建表时
	修改表示

	NOT NULL       非空约束 保证字段不能为空
	DEFAULT       保证有默认值
	UNIQUE         唯一 可以为空
	PRIMARY KEY     字段值唯一性  不可为空
	FOREIGN KEY 	外键，用于限制两个表的关系   用于保证该字段的值必须来自主表的关联列的值 

	列级约束
	表级约束
	creat table 表名（
	字段名 字段类型 列级约束
	字段名 字段类型
	表级约束
	）




##数据库事务
###含义
	通过一组逻辑操作单元（一组DML——sql语句），将数据从一种状态切换到另外一种状态

###特点
	（ACID）
	原子性：要么都执行，要么都回滚
	一致性：保证数据的状态操作前和操作后保持一致
	隔离性：多个事务同时操作相同数据库的同一个数据时，一个事务的执行不受另外一个事务的干扰
	持久性：一个事务一旦提交，则数据将持久化到本地，除非其他事务对其进行修改

相关步骤：

	1、开启事务
	2、编写事务的一组逻辑操作单元（多条sql语句）
	3、提交事务或回滚事务

###事务的分类：

隐式事务，没有明显的开启和结束事务的标志

	比如
	insert、update、delete语句本身就是一个事务


显式事务，具有明显的开启和结束事务的标志

		1、开启事务
		取消自动提交事务的功能
		
		2、编写事务的一组逻辑操作单元（多条sql语句）
		insert
		update
		delete
		
		3、提交事务或回滚事务
###使用到的关键字

	set autocommit=0;
	start transaction;
	commit;
	rollback;
	
	savepoint  断点
	commit to 断点
	rollback to 断点


###事务的隔离级别:

事务并发问题如何发生？

	当多个事务同时操作同一个数据库的相同数据时
事务的并发问题有哪些？

	脏读：一个事务读取到了另外一个事务未提交的数据
	不可重复读：同一个事务中，多次读取到的数据不一致
	幻读：一个事务读取数据时，另外一个事务进行更新，导致第一个事务读取到了没有更新的数据
	
如何避免事务的并发问题？

	通过设置事务的隔离级别
	1、READ UNCOMMITTED
	2、READ COMMITTED 可以避免脏读
	3、REPEATABLE READ 可以避免脏读、不可重复读和一部分幻读
	4、SERIALIZABLE可以避免脏读、不可重复读和幻读
	
设置隔离级别：

	set session|global  transaction isolation level 隔离级别名;
查看隔离级别：

	select @@tx_isolation;
	


##视图
含义：理解成一张虚拟的表

视图和表的区别：
	
		使用方式	占用物理空间
	
	视图	完全相同	不占用，仅仅保存的是sql逻辑
	
	表	完全相同	占用

视图的好处：


	1、sql语句提高重用性，效率高
	2、和表实现了分离，提高了安全性

###视图的创建
	语法：
	CREATE VIEW  视图名
	AS
	查询语句;
###视图的增删改查
	1、查看视图的数据 ★
	
	SELECT * FROM my_v4;
	SELECT * FROM my_v1 WHERE last_name='Partners';
	
	2、插入视图的数据
	INSERT INTO my_v4(last_name,department_id) VALUES('虚竹',90);
	
	3、修改视图的数据
	
	UPDATE my_v4 SET last_name ='梦姑' WHERE last_name='虚竹';
	
	
	4、删除视图的数据
	DELETE FROM my_v4;
###某些视图不能更新
	包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union all
	常量视图
	Select中包含子查询
	join
	from一个不能更新的视图
	where子句的子查询引用了from子句中的表
###视图逻辑的更新
	#方式一：
	CREATE OR REPLACE VIEW test_v7
	AS
	SELECT last_name FROM employees
	WHERE employee_id>100;
	
	#方式二:
	ALTER VIEW test_v7
	AS
	SELECT employee_id FROM employees;
	
	SELECT * FROM test_v7;
###视图的删除
	DROP VIEW test_v1,test_v2,test_v3;
###视图结构的查看	
	DESC test_v7;
	SHOW CREATE VIEW test_v7;

##存储过程

含义：一组经过预先编译的sql语句的集合
好处：

	1、提高了sql语句的重用性，减少了开发程序员的压力
	2、提高了效率
	3、减少了传输次数

分类：

	1、无返回无参
	2、仅仅带in类型，无返回有参
	3、仅仅带out类型，有返回无参
	4、既带in又带out，有返回有参
	5、带inout，有返回有参
	注意：in、out、inout都可以在一个存储过程中带多个
###创建存储过程
语法：

	create procedure 存储过程名(in|out|inout 参数名  参数类型,...)
	begin
		存储过程体

	end

类似于方法：

	修饰符 返回类型 方法名(参数类型 参数名,...){

		方法体;
	}

注意

	1、需要设置新的结束标记
	delimiter 新的结束标记
	示例：
	delimiter $

	CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)
	BEGIN
		sql语句1;
		sql语句2;

	END $

	2、存储过程体中可以有多条sql语句，如果仅仅一条sql语句，则可以省略begin end

	3、参数前面的符号的意思
	in:该参数只能作为输入 （该参数不能做返回值）
	out：该参数只能作为输出（该参数只能做返回值）
	inout：既能做输入又能做输出


#调用存储过程
	call 存储过程名(实参列表)
##函数


###创建函数

学过的函数：LENGTH、SUBSTR、CONCAT等
语法：

	CREATE FUNCTION 函数名(参数名 参数类型,...) RETURNS 返回类型
	BEGIN
		函数体
	
	END

###调用函数
	SELECT 函数名（实参列表）





###函数和存储过程的区别

			关键字		调用语法	返回值			应用场景
	函数		FUNCTION	SELECT 函数()	只能是一个		一般用于查询结果为一个值并返回时，当有返回值而且仅仅一个
	存储过程	PROCEDURE	CALL 存储过程()	可以有0个或多个		一般用于更新


##流程控制结构

###系统变量
一、全局变量

作用域：针对于所有会话（连接）有效，但不能跨重启

	查看所有全局变量
	SHOW GLOBAL VARIABLES;
	查看满足条件的部分系统变量
	SHOW GLOBAL VARIABLES LIKE '%char%';
	查看指定的系统变量的值
	SELECT @@global.autocommit;
	为某个系统变量赋值
	SET @@global.autocommit=0;
	SET GLOBAL autocommit=0;

二、会话变量

作用域：针对于当前会话（连接）有效

	查看所有会话变量
	SHOW SESSION VARIABLES;
	查看满足条件的部分会话变量
	SHOW SESSION VARIABLES LIKE '%char%';
	查看指定的会话变量的值
	SELECT @@autocommit;
	SELECT @@session.tx_isolation;
	为某个会话变量赋值
	SET @@session.tx_isolation='read-uncommitted';
	SET SESSION tx_isolation='read-committed';

###自定义变量
一、用户变量

声明并初始化：

	SET @变量名=值;
	SET @变量名:=值;
	SELECT @变量名:=值;
赋值：

	方式一：一般用于赋简单的值
	SET 变量名=值;
	SET 变量名:=值;
	SELECT 变量名:=值;


	方式二：一般用于赋表 中的字段值
	SELECT 字段名或表达式 INTO 变量
	FROM 表;

使用：

	select @变量名;

二、局部变量

声明：

	declare 变量名 类型 【default 值】;
赋值：

	方式一：一般用于赋简单的值
	SET 变量名=值;
	SET 变量名:=值;
	SELECT 变量名:=值;


	方式二：一般用于赋表 中的字段值
	SELECT 字段名或表达式 INTO 变量
	FROM 表;

使用：

	select 变量名



二者的区别：

			作用域			定义位置		语法
用户变量	当前会话		会话的任何地方		加@符号，不用指定类型
局部变量	定义它的BEGIN END中 	BEGIN END的第一句话	一般不用加@,需要指定类型

###分支
一、if函数
	语法：if(条件，值1，值2)
	特点：可以用在任何位置

二、case语句

语法：

	情况一：类似于switch
	case 表达式
	when 值1 then 结果1或语句1(如果是语句，需要加分号) 
	when 值2 then 结果2或语句2(如果是语句，需要加分号)
	...
	else 结果n或语句n(如果是语句，需要加分号)
	end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）

	情况二：类似于多重if
	case 
	when 条件1 then 结果1或语句1(如果是语句，需要加分号) 
	when 条件2 then 结果2或语句2(如果是语句，需要加分号)
	...
	else 结果n或语句n(如果是语句，需要加分号)
	end 【case】（如果是放在begin end中需要加上case，如果放在select后面不需要）


特点：
	可以用在任何位置

三、if elseif语句

语法：

	if 情况1 then 语句1;
	elseif 情况2 then 语句2;
	...
	else 语句n;
	end if;

特点：
	只能用在begin end中！！！！！！！！！！！！！！！


三者比较：
			应用场合
	if函数		简单双分支
	case结构	等值判断 的多分支
	if结构		区间判断 的多分支


###循环

语法：


	【标签：】WHILE 循环条件  DO
		循环体
	END WHILE 【标签】;
	
特点：

	只能放在BEGIN END里面

	如果要搭配leave跳转语句，需要使用标签，否则可以不用标签

	leave类似于java中的break语句，跳出所在循环！！！
